----------------------------------------------------------------------
msg:
_VISPY_TESTING_APP=pyqt4 /usr/bin/python -m pytest -m vispy_app_test /home/gabriel/.local/lib/python2.7/site-packages/vispy
============================= test session starts ==============================
platform linux2 -- Python 2.7.17, pytest-4.6.11, py-1.9.0, pluggy-0.13.1
rootdir: /home/gabriel/.local/lib/python2.7/site-packages
plugins: cov-2.10.0
collected 667 items / 589 deselected / 78 selected

vispy/app/tests/test_app.py ......                                       [  7%]
vispy/app/tests/test_backends.py .                                       [  8%]
vispy/app/tests/test_context.py ..                                       [ 11%]
vispy/app/tests/test_qt.py .                                             [ 12%]
vispy/app/tests/test_simultaneous.py .                                   [ 14%]
vispy/gloo/gl/tests/test_basics.py s...                                  [ 19%]
vispy/gloo/gl/tests/test_functionality.py .sF.                           [ 24%]
vispy/gloo/tests/test_glir.py ..                                         [ 26%]
vispy/gloo/tests/test_program.py .                                       [ 28%]
vispy/gloo/tests/test_use_gloo.py ....                                   [ 33%]
vispy/gloo/tests/test_wrappers.py ..                                     [ 35%]
vispy/plot/tests/test_plot.py ..                                         [ 38%]
vispy/scene/cameras/tests/test_perspective.py .                          [ 39%]
vispy/scene/tests/test_node.py .                                         [ 41%]
vispy/util/tests/test_config.py .                                        [ 42%]
vispy/util/tests/test_vispy.py s                                         [ 43%]
vispy/visuals/tests/test_arrows.py ....                                  [ 48%]
vispy/visuals/tests/test_axis.py ...                                     [ 52%]
vispy/visuals/tests/test_collections.py .                                [ 53%]
vispy/visuals/tests/test_colorbar.py ...                                 [ 57%]
vispy/visuals/tests/test_colormap.py ......                              [ 65%]
vispy/visuals/tests/test_ellipse.py ....                                 [ 70%]
vispy/visuals/tests/test_histogram.py .                                  [ 71%]
vispy/visuals/tests/test_image.py .                                      [ 73%]
vispy/visuals/tests/test_infinite_line.py .                              [ 74%]
vispy/visuals/tests/test_linear_region.py ...                            [ 78%]
vispy/visuals/tests/test_markers.py .                                    [ 79%]
vispy/visuals/tests/test_polygon.py ...                                  [ 83%]
vispy/visuals/tests/test_rectangle.py ....                               [ 88%]
vispy/visuals/tests/test_regular_polygon.py ...                          [ 92%]
vispy/visuals/tests/test_sdf.py .                                        [ 93%]
vispy/visuals/tests/test_spectrogram.py .                                [ 94%]
vispy/visuals/tests/test_text.py ..                                      [ 97%]
vispy/visuals/tests/test_volume.py .                                     [ 98%]
vispy/visuals/tests/test_windbarb.py .                                   [100%]

=================================== FAILURES ===================================
_________________________ test_functionality_pyopengl __________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
numpy/testing/_private/decorators.py:155: in skipper_func
    return f(*args, **kwargs)
vispy/gloo/gl/tests/test_functionality.py:62: in test_functionality_pyopengl
    _test_functionality('pyopengl2')
vispy/gloo/gl/tests/test_functionality.py:96: in _test_functionality
    objects = _prepare_vis()
vispy/gloo/gl/tests/test_functionality.py:295: in _prepare_vis
    name, count, type = gl.glGetActiveAttrib(hprog, i)
vispy/gloo/gl/_pyopengl2.py:88: in glGetActiveAttrib
    name, size, type = GL.glGetActiveAttrib(program, index, bufSize=bufsize)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <OpenGL.platform.baseplatform.glGetActiveAttrib object at 0x7f23b6d2a280>
args = (1L, 0), named = {'bufSize': 256}
err = TypeError("'NoneType' object is not callable",)

    def __call__( self, *args, **named ):
        """Call self._finalCall, calling finalise() first if not already called
    
        There's actually *no* reason to unpack and repack the arguments,
        but unfortunately I don't know of a Cython syntax to specify
        that.
        """
        try:
            return self._finalCall( *args, **named )
        except (TypeError,AttributeError) as err:
            if self._finalCall is None:
                self._finalCall = self.finalise()
>           return self._finalCall( *args, **named )
E           TypeError: wrapperCall() got an unexpected keyword argument 'bufSize'

/usr/lib/python2.7/dist-packages/OpenGL/latebind.py:45: TypeError
=============================== warnings summary ===============================
vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:378: RuntimeWarning: invalid value encountered in divide
    major_frac = (major - offset) / scale

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:379: RuntimeWarning: invalid value encountered in divide
    minor_frac = (np.array(minor) - offset) / scale

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:381: RuntimeWarning: invalid value encountered in greater
    use_mask = (major_frac > -0.0001) & (major_frac < 1.0001)

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:381: RuntimeWarning: invalid value encountered in less
    use_mask = (major_frac > -0.0001) & (major_frac < 1.0001)

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:384: RuntimeWarning: invalid value encountered in greater
    minor_frac = minor_frac[(minor_frac > -0.0001) &

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:385: RuntimeWarning: invalid value encountered in less
    (minor_frac < 1.0001)]

-- Docs: https://docs.pytest.org/en/latest/warnings.html
= 1 failed, 74 passed, 3 skipped, 589 deselected, 6 warnings in 68.80 seconds ==
Failed: unit failure (1)
----------------------------------------------------------------------
msg:
_VISPY_TESTING_APP=pyqt5 /usr/bin/python -m pytest -m vispy_app_test /home/gabriel/.local/lib/python2.7/site-packages/vispy
============================= test session starts ==============================
platform linux2 -- Python 2.7.17, pytest-4.6.11, py-1.9.0, pluggy-0.13.1
rootdir: /home/gabriel/.local/lib/python2.7/site-packages
plugins: cov-2.10.0
collected 667 items / 589 deselected / 78 selected

vispy/app/tests/test_app.py ......                                       [  7%]
vispy/app/tests/test_backends.py .                                       [  8%]
vispy/app/tests/test_context.py xF                                       [ 11%]
vispy/app/tests/test_qt.py s                                             [ 12%]
vispy/app/tests/test_simultaneous.py .                                   [ 14%]
vispy/gloo/gl/tests/test_basics.py s...                                  [ 19%]
vispy/gloo/gl/tests/test_functionality.py .sF.                           [ 24%]
vispy/gloo/tests/test_glir.py ..                                         [ 26%]
vispy/gloo/tests/test_program.py .                                       [ 28%]
vispy/gloo/tests/test_use_gloo.py ....                                   [ 33%]
vispy/gloo/tests/test_wrappers.py ..                                     [ 35%]
vispy/plot/tests/test_plot.py ..                                         [ 38%]
vispy/scene/cameras/tests/test_perspective.py .                          [ 39%]
vispy/scene/tests/test_node.py .                                         [ 41%]
vispy/util/tests/test_config.py .                                        [ 42%]
vispy/util/tests/test_vispy.py s                                         [ 43%]
vispy/visuals/tests/test_arrows.py ....                                  [ 48%]
vispy/visuals/tests/test_axis.py ...                                     [ 52%]
vispy/visuals/tests/test_collections.py .                                [ 53%]
vispy/visuals/tests/test_colorbar.py ...                                 [ 57%]
vispy/visuals/tests/test_colormap.py ......                              [ 65%]
vispy/visuals/tests/test_ellipse.py ....                                 [ 70%]
vispy/visuals/tests/test_histogram.py .                                  [ 71%]
vispy/visuals/tests/test_image.py .                                      [ 73%]
vispy/visuals/tests/test_infinite_line.py .                              [ 74%]
vispy/visuals/tests/test_linear_region.py ...                            [ 78%]
vispy/visuals/tests/test_markers.py .                                    [ 79%]
vispy/visuals/tests/test_polygon.py ...                                  [ 83%]
vispy/visuals/tests/test_rectangle.py ....                               [ 88%]
vispy/visuals/tests/test_regular_polygon.py ...                          [ 92%]
vispy/visuals/tests/test_sdf.py .                                        [ 93%]
vispy/visuals/tests/test_spectrogram.py .                                [ 94%]
vispy/visuals/tests/test_text.py ..                                      [ 97%]
vispy/visuals/tests/test_volume.py .                                     [ 98%]
vispy/visuals/tests/test_windbarb.py .                                   [100%]

=================================== FAILURES ===================================
___________________________ test_context_properties ____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @requires_application()
    def test_context_properties():
        """Test setting context properties"""
        a = use_app()
        if a.backend_name.lower() == 'pyglet':
            return  # cannot set more than once on Pyglet
        if a.backend_name.lower() == 'osmesa':
            return  # cannot set config on OSMesa
    
        # stereo, double buffer won't work on every sys
        configs = [dict(samples=4), dict(stencil_size=8),
                   dict(samples=4, stencil_size=8)]
        if a.backend_name.lower() != 'glfw':  # glfw *always* double-buffers
            configs.append(dict(double_buffer=False, samples=4))
            configs.append(dict(double_buffer=False))
        else:
            assert_raises(RuntimeError, Canvas, app=a,
                          config=dict(double_buffer=False))
        if a.backend_name.lower() == 'sdl2' and os.getenv('TRAVIS') == 'true':
            raise SkipTest('Travis SDL cannot set context')
        for config in configs:
            n_items = len(config)
            with Canvas(config=config):
                if 'true' in (os.getenv('TRAVIS', ''),
                              os.getenv('APPVEYOR', '').lower()):
                    # Travis and Appveyor cannot handle obtaining these values
                    props = config
                else:
                    props = get_gl_configuration()
                assert len(config) == n_items
                for key, val in config.items():
                    # XXX knownfail for windows samples, and wx (all platforms)
                    if key == 'samples':
                        iswx = a.backend_name.lower() == 'wx'
                        if not (sys.platform.startswith('win') or iswx):
>                           assert val == props[key], key
E                           AssertionError: samples
E                           assert 4 == ()

vispy/app/tests/test_context.py:48: AssertionError
----------------------------- Captured stderr call -----------------------------
WARNING: Failed to get size blue: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size depth: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size stencil: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size green: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size alpha: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size red: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get sRGB: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size blue: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size depth: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size stencil: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size green: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size alpha: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size red: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get sRGB: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size blue: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size depth: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size stencil: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size green: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size alpha: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size red: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get sRGB: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size blue: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size depth: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size stencil: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size green: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size alpha: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get size red: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING: Failed to get sRGB: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
------------------------------ Captured log call -------------------------------
WARNING  vispy:wrappers.py:720 Failed to get size blue: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size depth: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size stencil: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size green: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size alpha: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size red: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:729 Failed to get sRGB: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size blue: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size depth: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size stencil: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size green: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size alpha: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size red: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:729 Failed to get sRGB: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size blue: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size depth: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size stencil: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size green: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size alpha: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size red: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:729 Failed to get sRGB: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size blue: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size depth: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size stencil: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size green: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size alpha: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:720 Failed to get size red: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
WARNING  vispy:wrappers.py:729 Failed to get sRGB: OpenGL got errors (glGetFramebufferAttachmentParameter): GL_INVALID_ENUM
_________________________ test_functionality_pyopengl __________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
numpy/testing/_private/decorators.py:155: in skipper_func
    return f(*args, **kwargs)
vispy/gloo/gl/tests/test_functionality.py:62: in test_functionality_pyopengl
    _test_functionality('pyopengl2')
vispy/gloo/gl/tests/test_functionality.py:96: in _test_functionality
    objects = _prepare_vis()
vispy/gloo/gl/tests/test_functionality.py:295: in _prepare_vis
    name, count, type = gl.glGetActiveAttrib(hprog, i)
vispy/gloo/gl/_pyopengl2.py:88: in glGetActiveAttrib
    name, size, type = GL.glGetActiveAttrib(program, index, bufSize=bufsize)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <OpenGL.platform.baseplatform.glGetActiveAttrib object at 0x7f9565bc89b0>
args = (2L, 0), named = {'bufSize': 256}
err = TypeError("'NoneType' object is not callable",)

    def __call__( self, *args, **named ):
        """Call self._finalCall, calling finalise() first if not already called
    
        There's actually *no* reason to unpack and repack the arguments,
        but unfortunately I don't know of a Cython syntax to specify
        that.
        """
        try:
            return self._finalCall( *args, **named )
        except (TypeError,AttributeError) as err:
            if self._finalCall is None:
                self._finalCall = self.finalise()
>           return self._finalCall( *args, **named )
E           TypeError: wrapperCall() got an unexpected keyword argument 'bufSize'

/usr/lib/python2.7/dist-packages/OpenGL/latebind.py:45: TypeError
=============================== warnings summary ===============================
vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:378: RuntimeWarning: invalid value encountered in divide
    major_frac = (major - offset) / scale

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:379: RuntimeWarning: invalid value encountered in divide
    minor_frac = (np.array(minor) - offset) / scale

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:381: RuntimeWarning: invalid value encountered in greater
    use_mask = (major_frac > -0.0001) & (major_frac < 1.0001)

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:381: RuntimeWarning: invalid value encountered in less
    use_mask = (major_frac > -0.0001) & (major_frac < 1.0001)

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:384: RuntimeWarning: invalid value encountered in greater
    minor_frac = minor_frac[(minor_frac > -0.0001) &

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:385: RuntimeWarning: invalid value encountered in less
    (minor_frac < 1.0001)]

-- Docs: https://docs.pytest.org/en/latest/warnings.html
= 2 failed, 71 passed, 4 skipped, 589 deselected, 1 xfailed, 6 warnings in 65.21 seconds =
Failed: unit failure (1)
----------------------------------------------------------------------
msg:
_VISPY_TESTING_APP=pyside /usr/bin/python -m pytest -m vispy_app_test /home/gabriel/.local/lib/python2.7/site-packages/vispy
============================= test session starts ==============================
platform linux2 -- Python 2.7.17, pytest-4.6.11, py-1.9.0, pluggy-0.13.1
rootdir: /home/gabriel/.local/lib/python2.7/site-packages
plugins: cov-2.10.0
collected 667 items / 589 deselected / 78 selected

vispy/app/tests/test_app.py FFFFFF                                       [  7%]
vispy/app/tests/test_backends.py .                                       [  8%]
vispy/app/tests/test_context.py FF                                       [ 11%]
vispy/app/tests/test_qt.py s                                             [ 12%]
vispy/app/tests/test_simultaneous.py F                                   [ 14%]
vispy/gloo/gl/tests/test_basics.py sFFF                                  [ 19%]
vispy/gloo/gl/tests/test_functionality.py FsFF                           [ 24%]
vispy/gloo/tests/test_glir.py FF                                         [ 26%]
vispy/gloo/tests/test_program.py F                                       [ 28%]
vispy/gloo/tests/test_use_gloo.py F.FF                                   [ 33%]
vispy/gloo/tests/test_wrappers.py FF                                     [ 35%]
vispy/plot/tests/test_plot.py FF                                         [ 38%]
vispy/scene/cameras/tests/test_perspective.py F                          [ 39%]
vispy/scene/tests/test_node.py F                                         [ 41%]
vispy/util/tests/test_config.py F                                        [ 42%]
vispy/util/tests/test_vispy.py .                                         [ 43%]
vispy/visuals/tests/test_arrows.py FFFF                                  [ 48%]
vispy/visuals/tests/test_axis.py FFF                                     [ 52%]
vispy/visuals/tests/test_collections.py F                                [ 53%]
vispy/visuals/tests/test_colorbar.py FFF                                 [ 57%]
vispy/visuals/tests/test_colormap.py FFFFFF                              [ 65%]
vispy/visuals/tests/test_ellipse.py FFFF                                 [ 70%]
vispy/visuals/tests/test_histogram.py F                                  [ 71%]
vispy/visuals/tests/test_image.py F                                      [ 73%]
vispy/visuals/tests/test_infinite_line.py F                              [ 74%]
vispy/visuals/tests/test_linear_region.py FFF                            [ 78%]
vispy/visuals/tests/test_markers.py F                                    [ 79%]
vispy/visuals/tests/test_polygon.py FFF                                  [ 83%]
vispy/visuals/tests/test_rectangle.py FFFF                               [ 88%]
vispy/visuals/tests/test_regular_polygon.py FFF                          [ 92%]
vispy/visuals/tests/test_sdf.py F                                        [ 93%]
vispy/visuals/tests/test_spectrogram.py F                                [ 94%]
vispy/visuals/tests/test_text.py FF                                      [ 97%]
vispy/visuals/tests/test_volume.py F                                     [ 98%]
vispy/visuals/tests/test_windbarb.py F                                   [100%]

=================================== FAILURES ===================================
___________________________________ test_fs ____________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/app/tests/test_app.py:327: in test_fs
    with Canvas(fullscreen=False) as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd93ae4d190>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd944d1a190>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd944d1a190>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
----------------------------- Captured stderr call -----------------------------
Gtk-Message: 15:55:47.543: Failed to load module "canberra-gtk-module"
___________________________________ test_run ___________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/app/tests/test_app.py:128: in test_run
    with Canvas(size=(100, 100), show=True, title='run') as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd944d0ea00>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93aafc750>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93aafc750>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_capability ________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/app/tests/test_app.py:146: in test_capability
    with Canvas() as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd944d0e870>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93aafc590>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93aafc590>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_event_order _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/app/tests/test_app.py:374: in test_event_order
    with MyCanvas(show=show) as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd944d0e4b0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd944d1a150>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd944d1a150>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_application _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/app/tests/test_app.py:184: in test_application
    position=pos) as canvas:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9202ac780>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93aafce10>, 'parent': None...alse, 'decorate': True, 'vsync': False, 'position': [0, 0], 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93aafce10>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
----------------------------- Captured stdout call -----------------------------
<Vispy app, wrapping the PySide GUI toolkit>
<Vispy app, wrapping the PySide GUI toolkit>
_______________________________ test_close_keys ________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/app/tests/test_app.py:341: in test_close_keys
    c = Canvas(keys='interactive')
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd93ab55eb0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93ab5fe10>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93ab5fe10>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_____________________________ test_context_sharing _____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/app/tests/test_context.py:57: in test_context_sharing
    with Canvas() as c1:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd93ae51b40>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93ab26bd0>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93ab26bd0>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
___________________________ test_context_properties ____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/app/tests/test_context.py:35: in test_context_properties
    with Canvas(config=config):
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9202ac910>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9202c7890>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9202c7890>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
____________________________ test_multiple_canvases ____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/app/tests/test_simultaneous.py:53: in test_multiple_canvases
    with Canvas(app=app, size=_win_size, title='same_0') as c0:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd93aaf2f00>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd938719290>, 'parent': None...: False, 'decorate': True, 'vsync': False, 'position': None, 'size': (200, 50)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd938719290>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_____________________________ test_basics_desktop ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/gl/tests/test_basics.py:26: in test_basics_desktop
    _test_basics('gl2')
vispy/gloo/gl/tests/test_basics.py:74: in _test_basics
    with Canvas():
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd938a90af0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd94351db50>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd94351db50>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_____________________________ test_basics_pypengl ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
numpy/testing/_private/decorators.py:155: in skipper_func
    return f(*args, **kwargs)
vispy/gloo/gl/tests/test_basics.py:53: in test_basics_pypengl
    _test_basics('pyopengl2')
vispy/gloo/gl/tests/test_basics.py:74: in _test_basics
    with Canvas():
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920190dc0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93ab25350>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93ab25350>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
___________________________ test_functionality_proxy ___________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/gl/tests/test_basics.py:46: in test_functionality_proxy
    _test_basics('gl2 debug')
vispy/gloo/gl/tests/test_basics.py:74: in _test_basics
    with Canvas():
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9202af4b0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd930051c90>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd930051c90>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
__________________________ test_functionality_desktop __________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/gl/tests/test_functionality.py:44: in test_functionality_desktop
    _test_functionality('gl2')
vispy/gloo/gl/tests/test_functionality.py:86: in _test_functionality
    with Canvas() as canvas:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920189140>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd943517090>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd943517090>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_________________________ test_functionality_pyopengl __________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
numpy/testing/_private/decorators.py:155: in skipper_func
    return f(*args, **kwargs)
vispy/gloo/gl/tests/test_functionality.py:62: in test_functionality_pyopengl
    _test_functionality('pyopengl2')
vispy/gloo/gl/tests/test_functionality.py:86: in _test_functionality
    with Canvas() as canvas:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9203960f0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9435173d0>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9435173d0>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
___________________________ test_functionality_proxy ___________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/gl/tests/test_functionality.py:53: in test_functionality_proxy
    _test_functionality('gl2 debug')
vispy/gloo/gl/tests/test_functionality.py:86: in _test_functionality
    with Canvas() as canvas:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92021e4b0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920319490>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920319490>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_log_parser ________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/tests/test_glir.py:80: in test_log_parser
    with Canvas() as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920330410>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9201886d0>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9201886d0>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
______________________________ test_capabilities _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/tests/test_glir.py:122: in test_capabilities
    with Canvas() as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9203303c0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920188410>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920188410>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
____________________________ ProgramTest.test_error ____________________________

args = (<vispy.gloo.tests.test_program.ProgramTest testMethod=test_error>,)
kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/tests/test_program.py:87: in test_error
    with app.Canvas() as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920330f50>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd943517650>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd943517650>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
______________________________ test_use_texture3D ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/tests/test_use_gloo.py:103: in test_use_texture3D
    with Canvas(size=(100, 100)) as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920330eb0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd930063410>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd930063410>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
______________________________ test_use_uniforms _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/tests/test_use_gloo.py:154: in test_use_uniforms
    with Canvas(size=shape) as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd938aab2d0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920188450>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (500, 500)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920188450>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_____________________________ test_use_framebuffer _____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/tests/test_use_gloo.py:35: in test_use_framebuffer
    with Canvas(size=shape[::-1]) as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920330820>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd943513a10>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (300, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd943513a10>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_read_pixels _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/tests/test_wrappers.py:232: in test_read_pixels
    with Canvas() as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9202a0aa0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93ab5fc10>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93ab5fc10>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
________________________________ test_wrappers _________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/tests/test_wrappers.py:154: in test_wrappers
    with Canvas():
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd938aab3c0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93bb6d410>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93bb6d410>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
____________________________ test_plot_widget_axes _____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/plot/tests/test_plot.py:32: in test_plot_widget_axes
    fig = vp.Fig(size=(800, 800), show=False)
vispy/plot/fig.py:43: in __init__
    show=show, size=size, **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920396050>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93006d090>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 800)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93006d090>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_____________________________ test_figure_creation _____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/plot/tests/test_plot.py:19: in test_figure_creation
    with vp.Fig(show=False) as fig:
vispy/plot/fig.py:43: in __init__
    show=show, size=size, **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92024dcd0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd930041110>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd930041110>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
___________________________ test_perspective_render ____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/scene/cameras/tests/test_perspective.py:19: in test_perspective_render
    with TestingCanvas(size=(120, 200)) as canvas:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd938aab500>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9202153d0>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (120, 200)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9202153d0>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
________________________________ test_topology _________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/scene/tests/test_node.py:27: in test_topology
    c = TestingCanvas()
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920396410>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920188e10>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920188e10>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
________________________________ test_sys_info _________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/util/tests/test_config.py:25: in test_sys_info
    assert_in(key, out)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

member = 'GL version'
container = "Platform: Linux-5.3.0-62-generic-x86_64-with-Ubuntu-18.04-bionic\nPython:   2.7.17 (default, Apr 15 2020, 17:20:14)  ...t_specific\n    self.setFormat(glformat)\nAttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'\n"
msg = None

    def assert_in(member, container, msg=None):
        """Backport"""
        if member in container:
            return
        std_msg = '%s not found in %s' % (_safe_rep(member), _safe_rep(container))
>       raise AssertionError(_format_msg(msg, std_msg))
E       AssertionError: 'GL version' not found in 'Platform: Linux-5.3.0-62-generic-x86_64-with-Ubuntu-18.04-bionic\nPython:   2.7.17 (default, Apr 15 2020, 17:20:14)  [GCC 7.5.0]\nNumPy:    1.16.6\nBackend:  PySide\npyqt4:    None\npyqt5:    None\npyside:   (\'PySide\', \'1.2.2\', \'4.8.7\')\npyside2:  None\npyglet:   None\nglfw:     None\nsdl2:     None\nwx:       None\negl:      None\nosmesa:   None\n_test:    None\n\nApp info-gathering error:\nTraceback (most recent call last):\n  File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/util/config.py", line 432, in sys_info\n    canvas = Canvas(\'Test\', (10, 10), show=False, app=app)\n  File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/canvas.py", line 205, in __init__\n    self.create_native()\n  File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/canvas.py", line 222, in create_native\n    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)\n  File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/backends/_qt.py", line 317, in __init__\n    self._init_specific(p, kwargs)\n  File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/backends/_qt.py", line 760, in _init_specific\n    self.setFormat(glformat)\nAttributeError: \'CanvasBackendDesktop\' object has no attribute \'setFormat\'\n'

vispy/testing/_testing.py:87: AssertionError
____________________________ test_arrow_attributes _____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_arrows.py:94: in test_arrow_attributes
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd938a8d410>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd94351df90>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd94351df90>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_arrow_draw ________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_arrows.py:38: in test_arrow_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920242f00>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd92016e490>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd92016e490>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_____________________________ test_arrow_reactive ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_arrows.py:80: in test_arrow_reactive
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920159aa0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd92016ec90>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd92016ec90>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
__________________________ test_arrow_transform_draw ___________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_arrows.py:58: in test_arrow_transform_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92009bc80>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920379510>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920379510>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_____________________________ test_rotation_angle ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_axis.py:40: in test_rotation_angle
    canvas = scene.SceneCanvas(keys=None, size=(800, 600), show=True)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9201f4050>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9203cc7d0>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (800, 600)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9203cc7d0>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
____________________________ test_axis_zero_domain _____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_axis.py:30: in test_axis_zero_domain
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920159640>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd92016ef50>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd92016ef50>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
__________________________________ test_axis ___________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_axis.py:21: in test_axis
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920159230>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd92016e050>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd92016e050>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
__________________________________ test_init ___________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_collections.py:13: in test_init
    with TestingCanvas():
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9201591e0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9203cc610>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9203cc610>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
______________________________ test_reactive_draw ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_colorbar.py:74: in test_reactive_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd93005eb90>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920379690>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920379690>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
______________________________ test_colorbar_draw ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_colorbar.py:38: in test_colorbar_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9201598c0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd92016ed10>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd92016ed10>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_attributes ________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_colorbar.py:110: in test_attributes
    with TestingCanvas():
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd93005e460>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9203cc1d0>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9203cc1d0>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
___________________________ test_colormap_single_hue ___________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_colormap.py:61: in test_colormap_single_hue
    with TestingCanvas(size=size, bgcolor='w') as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd938a82b40>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9203cce90>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9203cce90>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
__________________________ test_colormap_discrete_nu ___________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_colormap.py:48: in test_colormap_discrete_nu
    with TestingCanvas(size=size, bgcolor='w') as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92035b3c0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920379a50>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920379a50>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
________________________________ test_colormap _________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_colormap.py:22: in test_colormap
    with TestingCanvas(size=size, bgcolor='w') as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd93005e730>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920379a90>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920379a90>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
____________________________ test_colormap_discrete ____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_colormap.py:35: in test_colormap_discrete
    with TestingCanvas(size=size, bgcolor='w') as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92009b8c0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920379f10>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920379f10>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
____________________________ test_colormap_coolwarm ____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_colormap.py:73: in test_colormap_coolwarm
    with TestingCanvas(size=size, bgcolor='w') as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92009b5a0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9203796d0>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9203796d0>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
___________________________ test_colormap_CubeHelix ____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_colormap.py:84: in test_colormap_CubeHelix
    with TestingCanvas(size=size, bgcolor='w') as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd93005ebe0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920379750>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920379750>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
______________________________ test_reactive_draw ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_ellipse.py:95: in test_reactive_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd938a8d4b0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920379f10>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920379f10>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
________________________________ test_arc_draw1 ________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_ellipse.py:76: in test_arc_draw1
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd93004ca50>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920379410>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920379410>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_circle_draw _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_ellipse.py:19: in test_circle_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd938a8da00>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93003ad50>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93003ad50>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
______________________________ test_ellipse_draw _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_ellipse.py:46: in test_ellipse_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd938a8d3c0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd930043850>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd930043850>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
________________________________ test_histogram ________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_histogram.py:15: in test_histogram
    with TestingCanvas(size=size, bgcolor='w') as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9203452d0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd92031b350>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (200, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd92031b350>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
__________________________________ test_image __________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_image.py:14: in test_image
    with TestingCanvas(size=size, bgcolor='w') as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9203af190>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9203cba10>, 'parent': None... False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 50)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9203cba10>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
________________________________ test_set_data _________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_infinite_line.py:30: in test_set_data
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9200c31e0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9203cb9d0>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9203cb9d0>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
___________________________ test_linear_region_color ___________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_linear_region.py:95: in test_linear_region_color
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9202d5690>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9203cb650>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9203cb650>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
____________________ test_linear_region_vertical_horizontal ____________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_linear_region.py:48: in test_linear_region_vertical_horizontal
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd938a82be0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd92027b450>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd92027b450>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_________________________ test_linear_region_gradient __________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_linear_region.py:145: in test_linear_region_gradient
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920242960>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920348850>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920348850>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_________________________________ test_markers _________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_markers.py:17: in test_markers
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9202d54b0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920226810>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920226810>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
______________________________ test_reactive_draw ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
numpy/testing/_private/decorators.py:155: in skipper_func
    return f(*args, **kwargs)
vispy/visuals/tests/test_polygon.py:93: in test_reactive_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920345320>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920226190>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920226190>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_square_draw _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
numpy/testing/_private/decorators.py:155: in skipper_func
    return f(*args, **kwargs)
vispy/visuals/tests/test_polygon.py:24: in test_square_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd915558370>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920226310>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920226310>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_____________________________ test_rectangle_draw ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
numpy/testing/_private/decorators.py:155: in skipper_func
    return f(*args, **kwargs)
vispy/visuals/tests/test_polygon.py:59: in test_rectangle_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92013faf0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920226110>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920226110>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_attributes ________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_rectangle.py:147: in test_attributes
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92006b960>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920226950>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920226950>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_____________________________ test_rectangle_draw ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_rectangle.py:17: in test_rectangle_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd93003d3c0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920226ad0>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920226ad0>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
______________________________ test_reactive_draw ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_rectangle.py:113: in test_reactive_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd91557ef50>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9200bb650>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9200bb650>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
____________________________ test_rectpolygon_draw _____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_rectangle.py:69: in test_rectpolygon_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92006b910>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9203bb550>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9203bb550>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
__________________________ test_regular_polygon_draw2 __________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_regular_polygon.py:52: in test_regular_polygon_draw2
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92006bc30>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd920279ed0>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd920279ed0>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
______________________________ test_reactive_draw ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_regular_polygon.py:84: in test_reactive_draw
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9200a3eb0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93003c3d0>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93003c3d0>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
__________________________ test_regular_polygon_draw1 __________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_regular_polygon.py:19: in test_regular_polygon_draw1
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92015b1e0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9200c8450>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9200c8450>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
___________________________________ test_sdf ___________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_sdf.py:59: in test_sdf
    with Canvas(size=(100, 100)) as c:
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd938715500>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd944ac0a90>, 'parent': None... False, 'decorate': True, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd944ac0a90>, 'decorate': True, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_spectrogram _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_spectrogram.py:16: in test_spectrogram
    with TestingCanvas(size=size) as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920097780>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9202746d0>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 129)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9202746d0>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
__________________________________ test_text ___________________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_text.py:16: in test_text
    with TestingCanvas(bgcolor='w', size=(92, 92), dpi=92) as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd92035b050>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd9203cc490>, 'parent': None...: False, 'decorate': False, 'vsync': False, 'position': None, 'size': (92, 92)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd9203cc490>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
__________________________ test_text_rotation_update ___________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_text.py:47: in test_text_rotation_update
    with TestingCanvas() as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd91555bdc0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd93003ae90>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd93003ae90>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
_______________________________ test_volume_draw _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
numpy/testing/_private/decorators.py:155: in skipper_func
    return f(*args, **kwargs)
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_volume.py:47: in test_volume_draw
    with TestingCanvas(bgcolor='k', size=(100, 100)) as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd9200c35f0>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd92031db50>, 'parent': None...False, 'decorate': False, 'vsync': False, 'position': None, 'size': (100, 100)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd92031db50>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
______________________________ test_windbarb_draw ______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/visuals/tests/test_windbarb.py:24: in test_windbarb_draw
    with TestingCanvas(size=(250, 33), bgcolor='white') as c:
vispy/testing/_testing.py:381: in TestingCanvas
    return TestingCanvas(bgcolor, size, dpi, decorate, **kwargs)
vispy/testing/_testing.py:360: in __init__
    **kwargs)
vispy/scene/canvas.py:137: in __init__
    always_on_top, px_scale)
vispy/app/canvas.py:205: in __init__
    self.create_native()
vispy/app/canvas.py:222: in create_native
    self._app.backend_module.CanvasBackend(self, **self._backend_kwargs)
vispy/app/backends/_qt.py:317: in __init__
    self._init_specific(p, kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <vispy.app.backends._qt.CanvasBackendDesktop object at 0x7fd920345280>
p = {'fullscreen': False, 'context': <GLContext at 0x7fd92031bc10>, 'parent': None... False, 'decorate': False, 'vsync': False, 'position': None, 'size': (250, 33)}
kwargs = {'always_on_top': False, 'context': <GLContext at 0x7fd92031bc10>, 'decorate': False, 'fullscreen': False, ...}

    def _init_specific(self, p, kwargs):
    
        # Deal with config
        glformat = _set_config(p.context.config)
        glformat.setSwapInterval(1 if p.vsync else 0)
        # Deal with context
        widget = kwargs.pop('shareWidget', None) or self
        p.context.shared.add_ref('qt', widget)
        if p.context.shared.ref is widget:
            if widget is self:
                widget = None  # QGLWidget does not accept self ;)
        else:
            widget = p.context.shared.ref
            if 'shareWidget' in kwargs:
                raise RuntimeError('Cannot use vispy to share context and '
                                   'use built-in shareWidget.')
    
        if p.always_on_top or not p.decorate:
            hint = 0
            hint |= 0 if p.decorate else QtCore.Qt.FramelessWindowHint
            hint |= QtCore.Qt.WindowStaysOnTopHint if p.always_on_top else 0
        else:
            hint = QtCore.Qt.Widget  # can also be a window type
        if QT5_NEW_API:
            # Qt5 >= 5.4.0 - sharing is automatic
            QGLWidget.__init__(self, p.parent, hint)
    
            # Need to create an offscreen surface so we can get GL parameters
            # without opening/showing the Widget. PyQt5 >= 5.4 will create the
            # valid context later when the widget is shown.
            self._secondary_context = QtGui.QOpenGLContext()
            self._secondary_context.setShareContext(self.context())
            self._secondary_context.setFormat(glformat)
            self._secondary_context.create()
    
            self._surface = QtGui.QOffscreenSurface()
            self._surface.setFormat(glformat)
            self._surface.create()
            self._secondary_context.makeCurrent(self._surface)
        else:
            # Qt4 and Qt5 < 5.4.0 - sharing is explicitly requested
            QGLWidget.__init__(self, p.parent, widget, hint)
            # unused with this API
            self._secondary_context = None
            self._surface = None
    
>       self.setFormat(glformat)
E       AttributeError: 'CanvasBackendDesktop' object has no attribute 'setFormat'

vispy/app/backends/_qt.py:760: AttributeError
======= 72 failed, 3 passed, 3 skipped, 589 deselected in 17.59 seconds ========
Failed: unit failure (1)
----------------------------------------------------------------------
msg:
_VISPY_TESTING_APP=pyside2 /usr/bin/python -m pytest -m vispy_app_test /home/gabriel/.local/lib/python2.7/site-packages/vispy
============================= test session starts ==============================
platform linux2 -- Python 2.7.17, pytest-4.6.11, py-1.9.0, pluggy-0.13.1
rootdir: /home/gabriel/.local/lib/python2.7/site-packages
plugins: cov-2.10.0
collected 667 items / 589 deselected / 78 selected

vispy/app/tests/test_app.py ......                                       [  7%]
vispy/app/tests/test_backends.py .                                       [  8%]
vispy/app/tests/test_context.py F.                                       [ 11%]
vispy/app/tests/test_qt.py s                                             [ 12%]
vispy/app/tests/test_simultaneous.py .                                   [ 14%]
vispy/gloo/gl/tests/test_basics.py s.Failed: unit failure (-11)
----------------------------------------------------------------------
Skipping backend pyglet, not installed or working properly:
    
    Traceback (most recent call last):
      File "<string>", line 1, in <module>
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/_default_app.py", line 47, in use_app
        default_app = Application(backend_name)
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/application.py", line 49, in __init__
        self._use(backend_name)
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/application.py", line 235, in _use
        raise RuntimeError(msg)
    RuntimeError: Could not import backend "Pyglet":
    pyglet 1.5.7 requires Python 3.5 or newer.
    
----------------------------------------------------------------------
----------------------------------------------------------------------
Skipping backend glfw, not installed or working properly:
    
    Traceback (most recent call last):
      File "<string>", line 1, in <module>
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/_default_app.py", line 47, in use_app
        default_app = Application(backend_name)
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/application.py", line 49, in __init__
        self._use(backend_name)
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/application.py", line 235, in _use
        raise RuntimeError(msg)
    RuntimeError: Could not import backend "Glfw":
    GLFW library not found
    
----------------------------------------------------------------------
----------------------------------------------------------------------
msg:
_VISPY_TESTING_APP=sdl2 /usr/bin/python -m pytest -m vispy_app_test /home/gabriel/.local/lib/python2.7/site-packages/vispy
============================= test session starts ==============================
platform linux2 -- Python 2.7.17, pytest-4.6.11, py-1.9.0, pluggy-0.13.1
rootdir: /home/gabriel/.local/lib/python2.7/site-packages
plugins: cov-2.10.0
collected 667 items / 589 deselected / 78 selected

vispy/app/tests/test_app.py ......                                       [  7%]
vispy/app/tests/test_backends.py .                                       [  8%]
vispy/app/tests/test_context.py ..                                       [ 11%]
vispy/app/tests/test_qt.py s                                             [ 12%]
vispy/app/tests/test_simultaneous.py .                                   [ 14%]
vispy/gloo/gl/tests/test_basics.py s...                                  [ 19%]
vispy/gloo/gl/tests/test_functionality.py .sF.                           [ 24%]
vispy/gloo/tests/test_glir.py ..                                         [ 26%]
vispy/gloo/tests/test_program.py .                                       [ 28%]
vispy/gloo/tests/test_use_gloo.py ....                                   [ 33%]
vispy/gloo/tests/test_wrappers.py ..                                     [ 35%]
vispy/plot/tests/test_plot.py ..                                         [ 38%]
vispy/scene/cameras/tests/test_perspective.py .                          [ 39%]
vispy/scene/tests/test_node.py .                                         [ 41%]
vispy/util/tests/test_config.py .                                        [ 42%]
vispy/util/tests/test_vispy.py s                                         [ 43%]
vispy/visuals/tests/test_arrows.py ....                                  [ 48%]
vispy/visuals/tests/test_axis.py ...                                     [ 52%]
vispy/visuals/tests/test_collections.py .                                [ 53%]
vispy/visuals/tests/test_colorbar.py ...                                 [ 57%]
vispy/visuals/tests/test_colormap.py ......                              [ 65%]
vispy/visuals/tests/test_ellipse.py ....                                 [ 70%]
vispy/visuals/tests/test_histogram.py .                                  [ 71%]
vispy/visuals/tests/test_image.py .                                      [ 73%]
vispy/visuals/tests/test_infinite_line.py .                              [ 74%]
vispy/visuals/tests/test_linear_region.py ...                            [ 78%]
vispy/visuals/tests/test_markers.py .                                    [ 79%]
vispy/visuals/tests/test_polygon.py ...                                  [ 83%]
vispy/visuals/tests/test_rectangle.py ....                               [ 88%]
vispy/visuals/tests/test_regular_polygon.py ...                          [ 92%]
vispy/visuals/tests/test_sdf.py .                                        [ 93%]
vispy/visuals/tests/test_spectrogram.py .                                [ 94%]
vispy/visuals/tests/test_text.py ..                                      [ 97%]
vispy/visuals/tests/test_volume.py .                                     [ 98%]
vispy/visuals/tests/test_windbarb.py .                                   [100%]

=================================== FAILURES ===================================
_________________________ test_functionality_pyopengl __________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
numpy/testing/_private/decorators.py:155: in skipper_func
    return f(*args, **kwargs)
vispy/gloo/gl/tests/test_functionality.py:62: in test_functionality_pyopengl
    _test_functionality('pyopengl2')
vispy/gloo/gl/tests/test_functionality.py:96: in _test_functionality
    objects = _prepare_vis()
vispy/gloo/gl/tests/test_functionality.py:295: in _prepare_vis
    name, count, type = gl.glGetActiveAttrib(hprog, i)
vispy/gloo/gl/_pyopengl2.py:88: in glGetActiveAttrib
    name, size, type = GL.glGetActiveAttrib(program, index, bufSize=bufsize)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <OpenGL.platform.baseplatform.glGetActiveAttrib object at 0x7f9f09114c30>
args = (1L, 0), named = {'bufSize': 256}
err = TypeError("'NoneType' object is not callable",)

    def __call__( self, *args, **named ):
        """Call self._finalCall, calling finalise() first if not already called
    
        There's actually *no* reason to unpack and repack the arguments,
        but unfortunately I don't know of a Cython syntax to specify
        that.
        """
        try:
            return self._finalCall( *args, **named )
        except (TypeError,AttributeError) as err:
            if self._finalCall is None:
                self._finalCall = self.finalise()
>           return self._finalCall( *args, **named )
E           TypeError: wrapperCall() got an unexpected keyword argument 'bufSize'

/usr/lib/python2.7/dist-packages/OpenGL/latebind.py:45: TypeError
=============================== warnings summary ===============================
vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:378: RuntimeWarning: invalid value encountered in divide
    major_frac = (major - offset) / scale

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:379: RuntimeWarning: invalid value encountered in divide
    minor_frac = (np.array(minor) - offset) / scale

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:381: RuntimeWarning: invalid value encountered in greater
    use_mask = (major_frac > -0.0001) & (major_frac < 1.0001)

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:381: RuntimeWarning: invalid value encountered in less
    use_mask = (major_frac > -0.0001) & (major_frac < 1.0001)

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:384: RuntimeWarning: invalid value encountered in greater
    minor_frac = minor_frac[(minor_frac > -0.0001) &

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:385: RuntimeWarning: invalid value encountered in less
    (minor_frac < 1.0001)]

-- Docs: https://docs.pytest.org/en/latest/warnings.html
= 1 failed, 73 passed, 4 skipped, 589 deselected, 6 warnings in 91.31 seconds ==
Failed: unit failure (1)
----------------------------------------------------------------------
msg:
_VISPY_TESTING_APP=wx /usr/bin/python -m pytest -m vispy_app_test /home/gabriel/.local/lib/python2.7/site-packages/vispy
============================= test session starts ==============================
platform linux2 -- Python 2.7.17, pytest-4.6.11, py-1.9.0, pluggy-0.13.1
rootdir: /home/gabriel/.local/lib/python2.7/site-packages
plugins: cov-2.10.0
collected 667 items / 589 deselected / 78 selected

vispy/app/tests/test_app.py ....F.                                       [  7%]
vispy/app/tests/test_backends.py .                                       [  8%]
vispy/app/tests/test_context.py ..                                       [ 11%]
vispy/app/tests/test_qt.py s                                             [ 12%]
vispy/app/tests/test_simultaneous.py s                                   [ 14%]
vispy/gloo/gl/tests/test_basics.py s...                                  [ 19%]
vispy/gloo/gl/tests/test_functionality.py .sF.                           [ 24%]
vispy/gloo/tests/test_glir.py ..                                         [ 26%]
vispy/gloo/tests/test_program.py .                                       [ 28%]
vispy/gloo/tests/test_use_gloo.py ..FF                                   [ 33%]
vispy/gloo/tests/test_wrappers.py ..                                     [ 35%]
vispy/plot/tests/test_plot.py ..                                         [ 38%]
vispy/scene/cameras/tests/test_perspective.py .                          [ 39%]
vispy/scene/tests/test_node.py .                                         [ 41%]
vispy/util/tests/test_config.py .                                        [ 42%]
vispy/util/tests/test_vispy.py s                                         [ 43%]
vispy/visuals/tests/test_arrows.py ....                                  [ 48%]
vispy/visuals/tests/test_axis.py ...                                     [ 52%]
vispy/visuals/tests/test_collections.py .                                [ 53%]
vispy/visuals/tests/test_colorbar.py ...                                 [ 57%]
vispy/visuals/tests/test_colormap.py ......                              [ 65%]
vispy/visuals/tests/test_ellipse.py ....                                 [ 70%]
vispy/visuals/tests/test_histogram.py .                                  [ 71%]
vispy/visuals/tests/test_image.py .                                      [ 73%]
vispy/visuals/tests/test_infinite_line.py .                              [ 74%]
vispy/visuals/tests/test_linear_region.py ...                            [ 78%]
vispy/visuals/tests/test_markers.py .                                    [ 79%]
vispy/visuals/tests/test_polygon.py ...                                  [ 83%]
vispy/visuals/tests/test_rectangle.py ....                               [ 88%]
vispy/visuals/tests/test_regular_polygon.py ...                          [ 92%]
vispy/visuals/tests/test_sdf.py .                                        [ 93%]
vispy/visuals/tests/test_spectrogram.py .                                [ 94%]
vispy/visuals/tests/test_text.py ..                                      [ 97%]
vispy/visuals/tests/test_volume.py .                                     [ 98%]
vispy/visuals/tests/test_windbarb.py .                                   [100%]

=================================== FAILURES ===================================
_______________________________ test_application _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/app/tests/test_app.py:205: in test_application
    canvas.size = size
vispy/app/canvas.py:342: in size
    size[1] * self._px_scale)
vispy/app/backends/_wx.py:334: in _vispy_set_size
    self.SetSize(w, h)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (wxPython wrapper for DELETED CanvasBackend object! (The C++ object no longer exists.), 100, 100)
kwargs = {}

    def SetSize(*args, **kwargs):
        """
        SetSize(self, Size size)
    
        Sets the size of the window in pixels.
        """
>       return _core_.Window_SetSize(*args, **kwargs)
E       TypeError: Window_SetSize() takes at most 2 arguments (3 given)

/usr/lib/python2.7/dist-packages/wx-3.0-gtk3/wx/_core.py:9334: TypeError
----------------------------- Captured stdout call -----------------------------
<Vispy app, wrapping the wx GUI toolkit>
<Vispy app, wrapping the wx GUI toolkit>
2.7 FPS
<Canvas (wx) at 0x7fd0a71d97d0>
_________________________ test_functionality_pyopengl __________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
numpy/testing/_private/decorators.py:155: in skipper_func
    return f(*args, **kwargs)
vispy/gloo/gl/tests/test_functionality.py:62: in test_functionality_pyopengl
    _test_functionality('pyopengl2')
vispy/gloo/gl/tests/test_functionality.py:96: in _test_functionality
    objects = _prepare_vis()
vispy/gloo/gl/tests/test_functionality.py:295: in _prepare_vis
    name, count, type = gl.glGetActiveAttrib(hprog, i)
vispy/gloo/gl/_pyopengl2.py:88: in glGetActiveAttrib
    name, size, type = GL.glGetActiveAttrib(program, index, bufSize=bufsize)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <OpenGL.platform.baseplatform.glGetActiveAttrib object at 0x7fd0a7bc8cd0>
args = (1L, 0), named = {'bufSize': 256}
err = TypeError("'NoneType' object is not callable",)

    def __call__( self, *args, **named ):
        """Call self._finalCall, calling finalise() first if not already called
    
        There's actually *no* reason to unpack and repack the arguments,
        but unfortunately I don't know of a Cython syntax to specify
        that.
        """
        try:
            return self._finalCall( *args, **named )
        except (TypeError,AttributeError) as err:
            if self._finalCall is None:
                self._finalCall = self.finalise()
>           return self._finalCall( *args, **named )
E           TypeError: wrapperCall() got an unexpected keyword argument 'bufSize'

/usr/lib/python2.7/dist-packages/OpenGL/latebind.py:45: TypeError
______________________________ test_use_uniforms _______________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
vispy/gloo/tests/test_use_gloo.py:157: in test_use_uniforms
    assert_equal(c.size, shape[::-1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = (500, 470), y = (500, 500), msg = None

    def assert_equal(x, y, msg=None):
        """Backport"""
        if x == y:
            return
        std_msg = '%s not equal to %s' % (_safe_rep(x), _safe_rep(y))
>       raise AssertionError(_format_msg(msg, std_msg))
E       AssertionError: (500, 470) not equal to (500, 500)

vispy/testing/_testing.py:103: AssertionError
----------------------------- Captured stdout call -----------------------------
('FUNC', 'glFinish')
_____________________________ test_use_framebuffer _____________________________

args = (), kwargs = {}

    def skipper_func(*args, **kwargs):
        """Skipper for normal test functions."""
        if skip_val():
            raise SkipTest(get_msg(f, msg))
        else:
>           return f(*args, **kwargs)

numpy/testing/_private/decorators.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
vispy/testing/_testing.py:232: in deco
    return f(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    @requires_application()
    def test_use_framebuffer():
        """Test drawing to a framebuffer"""
        shape = (100, 300)  # for some reason Windows wants a tall window...
        data = np.random.rand(*shape).astype(np.float32)
        use_shape = shape + (3,)
        with Canvas(size=shape[::-1]) as c:
            c.app.process_events()
            c.set_current()
            if c.app.backend_name.lower() == 'pyqt5':
                # PyQt5 on OSX for some reason sets this to 1024x768...
                c.size = shape[::-1]
            c.app.process_events()
            orig_tex = Texture2D(data)
            fbo_tex = Texture2D(use_shape, format='rgb')
            rbo = RenderBuffer(shape, 'color')
            fbo = FrameBuffer(color=fbo_tex)
            c.context.glir.set_verbose(True)
>           assert c.size == shape[::-1]
E           assert (300, 70) == (300, 100)
E             At index 1 diff: 70 != 100
E             Use -v to get the full diff

vispy/gloo/tests/test_use_gloo.py:47: AssertionError
----------------------------- Captured stdout call -----------------------------
('FUNC', 'glFinish')
=============================== warnings summary ===============================
vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:378: RuntimeWarning: invalid value encountered in divide
    major_frac = (major - offset) / scale

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:379: RuntimeWarning: invalid value encountered in divide
    minor_frac = (np.array(minor) - offset) / scale

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:381: RuntimeWarning: invalid value encountered in greater
    use_mask = (major_frac > -0.0001) & (major_frac < 1.0001)

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:381: RuntimeWarning: invalid value encountered in less
    use_mask = (major_frac > -0.0001) & (major_frac < 1.0001)

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:384: RuntimeWarning: invalid value encountered in greater
    minor_frac = minor_frac[(minor_frac > -0.0001) &

vispy/visuals/tests/test_axis.py::test_axis_zero_domain
  /home/gabriel/.local/lib/python2.7/site-packages/vispy/visuals/axis.py:385: RuntimeWarning: invalid value encountered in less
    (minor_frac < 1.0001)]

-- Docs: https://docs.pytest.org/en/latest/warnings.html
= 4 failed, 69 passed, 5 skipped, 589 deselected, 6 warnings in 143.83 seconds =
Failed: unit failure (1)
----------------------------------------------------------------------
msg:
_VISPY_TESTING_APP=egl /usr/bin/python -m pytest -m vispy_app_test /home/gabriel/.local/lib/python2.7/site-packages/vispy
============================= test session starts ==============================
platform linux2 -- Python 2.7.17, pytest-4.6.11, py-1.9.0, pluggy-0.13.1
rootdir: /home/gabriel/.local/lib/python2.7/site-packages
plugins: cov-2.10.0
collected 667 items / 589 deselected / 78 selected

vispy/app/tests/test_app.py ssssss                                       [  7%]
vispy/app/tests/test_backends.py s                                       [  8%]
vispy/app/tests/test_context.py ss                                       [ 11%]
vispy/app/tests/test_qt.py s                                             [ 12%]
vispy/app/tests/test_simultaneous.py s                                   [ 14%]
vispy/gloo/gl/tests/test_basics.py ssss                                  [ 19%]
vispy/gloo/gl/tests/test_functionality.py ssss                           [ 24%]
vispy/gloo/tests/test_glir.py ss                                         [ 26%]
vispy/gloo/tests/test_program.py s                                       [ 28%]
vispy/gloo/tests/test_use_gloo.py ssss                                   [ 33%]
vispy/gloo/tests/test_wrappers.py ss                                     [ 35%]
vispy/plot/tests/test_plot.py ss                                         [ 38%]
vispy/scene/cameras/tests/test_perspective.py s                          [ 39%]
vispy/scene/tests/test_node.py s                                         [ 41%]
vispy/util/tests/test_config.py s                                        [ 42%]
vispy/util/tests/test_vispy.py s                                         [ 43%]
vispy/visuals/tests/test_arrows.py ssss                                  [ 48%]
vispy/visuals/tests/test_axis.py sss                                     [ 52%]
vispy/visuals/tests/test_collections.py s                                [ 53%]
vispy/visuals/tests/test_colorbar.py sss                                 [ 57%]
vispy/visuals/tests/test_colormap.py ssssss                              [ 65%]
vispy/visuals/tests/test_ellipse.py ssss                                 [ 70%]
vispy/visuals/tests/test_histogram.py s                                  [ 71%]
vispy/visuals/tests/test_image.py s                                      [ 73%]
vispy/visuals/tests/test_infinite_line.py s                              [ 74%]
vispy/visuals/tests/test_linear_region.py sss                            [ 78%]
vispy/visuals/tests/test_markers.py s                                    [ 79%]
vispy/visuals/tests/test_polygon.py sss                                  [ 83%]
vispy/visuals/tests/test_rectangle.py ssss                               [ 88%]
vispy/visuals/tests/test_regular_polygon.py sss                          [ 92%]
vispy/visuals/tests/test_sdf.py s                                        [ 93%]
vispy/visuals/tests/test_spectrogram.py s                                [ 94%]
vispy/visuals/tests/test_text.py ss                                      [ 97%]
vispy/visuals/tests/test_volume.py s                                     [ 98%]
vispy/visuals/tests/test_windbarb.py s                                   [100%]

================== 78 skipped, 589 deselected in 2.18 seconds ==================
Passed

----------------------------------------------------------------------
msg:
_VISPY_TESTING_APP=osmesa /usr/bin/python -m pytest -m vispy_app_test /home/gabriel/.local/lib/python2.7/site-packages/vispy
============================= test session starts ==============================
platform linux2 -- Python 2.7.17, pytest-4.6.11, py-1.9.0, pluggy-0.13.1
rootdir: /home/gabriel/.local/lib/python2.7/site-packages
plugins: cov-2.10.0
collected 442 items / 56 errors / 442 deselected

==================================== ERRORS ====================================
_________________ ERROR collecting vispy/app/backends/_test.py _________________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/app/__init__.py:15: in <module>
    from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
vispy/app/canvas.py:17: in <module>
    from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
_________ ERROR collecting vispy/app/backends/tests/test_ipynb_util.py _________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/app/__init__.py:15: in <module>
    from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
vispy/app/canvas.py:17: in <module>
    from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_________________ ERROR collecting vispy/app/tests/test_app.py _________________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/app/__init__.py:15: in <module>
    from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
vispy/app/canvas.py:17: in <module>
    from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/app/tests/test_backends.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/app/__init__.py:15: in <module>
    from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
vispy/app/canvas.py:17: in <module>
    from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_______________ ERROR collecting vispy/app/tests/test_context.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/app/__init__.py:15: in <module>
    from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
vispy/app/canvas.py:17: in <module>
    from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_____________ ERROR collecting vispy/app/tests/test_interactive.py _____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/app/__init__.py:15: in <module>
    from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
vispy/app/canvas.py:17: in <module>
    from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_______________ ERROR collecting vispy/app/tests/test_ipython.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/app/__init__.py:15: in <module>
    from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
vispy/app/canvas.py:17: in <module>
    from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_________________ ERROR collecting vispy/app/tests/test_qt.py __________________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/app/__init__.py:15: in <module>
    from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
vispy/app/canvas.py:17: in <module>
    from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
____________ ERROR collecting vispy/app/tests/test_simultaneous.py _____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/app/__init__.py:15: in <module>
    from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
vispy/app/canvas.py:17: in <module>
    from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_______________ ERROR collecting vispy/color/tests/test_color.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/color/__init__.py:12: in <module>
    from .colormap import (Colormap, BaseColormap,  # noqa
vispy/color/colormap.py:15: in <module>
    import vispy.gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_____________ ERROR collecting vispy/gloo/gl/tests/test_basics.py ______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
__________ ERROR collecting vispy/gloo/gl/tests/test_functionality.py __________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/gloo/gl/tests/test_names.py ______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_______________ ERROR collecting vispy/gloo/gl/tests/test_use.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_______________ ERROR collecting vispy/gloo/tests/test_buffer.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/gloo/tests/test_context.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
____________ ERROR collecting vispy/gloo/tests/test_framebuffer.py _____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
________________ ERROR collecting vispy/gloo/tests/test_glir.py ________________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/gloo/tests/test_globject.py ______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/gloo/tests/test_program.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/gloo/tests/test_texture.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/gloo/tests/test_use_gloo.py ______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
________________ ERROR collecting vispy/gloo/tests/test_util.py ________________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/gloo/tests/test_wrappers.py ______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
________________ ERROR collecting vispy/plot/tests/test_plot.py ________________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/plot/__init__.py:34: in <module>
    from .fig import Fig  # noqa
vispy/plot/fig.py:5: in <module>
    from ..scene import SceneCanvas
vispy/scene/__init__.py:33: in <module>
    from .visuals import *  # noqa
vispy/scene/visuals.py:18: in <module>
    from .. import visuals
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
________ ERROR collecting vispy/scene/cameras/tests/test_perspective.py ________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/scene/__init__.py:33: in <module>
    from .visuals import *  # noqa
vispy/scene/visuals.py:18: in <module>
    from .. import visuals
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_______________ ERROR collecting vispy/scene/tests/test_node.py ________________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/scene/__init__.py:33: in <module>
    from .visuals import *  # noqa
vispy/scene/visuals.py:18: in <module>
    from .. import visuals
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/scene/tests/test_visuals.py ______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/scene/__init__.py:33: in <module>
    from .visuals import *  # noqa
vispy/scene/visuals.py:18: in <module>
    from .. import visuals
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_______________ ERROR collecting vispy/util/tests/test_config.py _______________
vispy/util/tests/test_config.py:15: in <module>
    @requires_application()
vispy/testing/_testing.py:238: in requires_application
    good, msg = has_application(backend, has, capable)
vispy/testing/_testing.py:200: in has_application
    from ..app.backends import BACKEND_NAMES
vispy/app/__init__.py:15: in <module>
    from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
vispy/app/canvas.py:17: in <module>
    from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_______________ ERROR collecting vispy/util/tests/test_vispy.py ________________
vispy/util/tests/test_vispy.py:8: in <module>
    import vispy.app
vispy/app/__init__.py:15: in <module>
    from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
vispy/app/canvas.py:17: in <module>
    from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_________ ERROR collecting vispy/visuals/graphs/tests/test_layouts.py __________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
________ ERROR collecting vispy/visuals/shaders/tests/test_function.py _________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______ ERROR collecting vispy/visuals/shaders/tests/test_multiprogram.py _______
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_________ ERROR collecting vispy/visuals/shaders/tests/test_parsing.py _________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_____________ ERROR collecting vispy/visuals/tests/test_arrows.py ______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/visuals/tests/test_axis.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
___________ ERROR collecting vispy/visuals/tests/test_collections.py ___________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
____________ ERROR collecting vispy/visuals/tests/test_colorbar.py _____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
____________ ERROR collecting vispy/visuals/tests/test_colormap.py _____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_____________ ERROR collecting vispy/visuals/tests/test_ellipse.py _____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
____________ ERROR collecting vispy/visuals/tests/test_histogram.py ____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/visuals/tests/test_image.py ______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
__________ ERROR collecting vispy/visuals/tests/test_infinite_line.py __________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
___________ ERROR collecting vispy/visuals/tests/test_isosurface.py ____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
__________ ERROR collecting vispy/visuals/tests/test_linear_region.py __________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_____________ ERROR collecting vispy/visuals/tests/test_markers.py _____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/visuals/tests/test_mesh.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_____________ ERROR collecting vispy/visuals/tests/test_polygon.py _____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
____________ ERROR collecting vispy/visuals/tests/test_rectangle.py ____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_________ ERROR collecting vispy/visuals/tests/test_regular_polygon.py _________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_______________ ERROR collecting vispy/visuals/tests/test_sdf.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
___________ ERROR collecting vispy/visuals/tests/test_spectrogram.py ___________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______________ ERROR collecting vispy/visuals/tests/test_text.py _______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
_____________ ERROR collecting vispy/visuals/tests/test_volume.py ______________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
____________ ERROR collecting vispy/visuals/tests/test_windbarb.py _____________
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
______ ERROR collecting vispy/visuals/transforms/tests/test_transforms.py ______
py/_path/local.py:704: in pyimport
    __import__(modname)
vispy/visuals/__init__.py:14: in <module>
    from .axis import AxisVisual  # noqa
vispy/visuals/axis.py:11: in <module>
    from .visual import CompoundVisual
vispy/visuals/visual.py:90: in <module>
    from .. import gloo
vispy/gloo/__init__.py:47: in <module>
    from . import gl  # noqa
vispy/gloo/gl/__init__.py:231: in <module>
    from . import gl2 as default_backend  # noqa
vispy/gloo/gl/gl2.py:28: in <module>
    _lib = ctypes.cdll.LoadLibrary(_lib)
/usr/lib/python2.7/ctypes/__init__.py:444: in LoadLibrary
    return self._dlltype(name)
/usr/lib/python2.7/ctypes/__init__.py:366: in __init__
    self._handle = _dlopen(self._name, mode)
E   OSError: libOSMesa.so: cannot open shared object file: No such file or directory
------------------------------- Captured stderr --------------------------------
WARNING: VISPY_GL_LIB is ignored when using OSMesa. Use OSMESA_LIBRARY instead.
!!!!!!!!!!!!!!!!!!! Interrupted: 56 errors during collection !!!!!!!!!!!!!!!!!!!
=================== 442 deselected, 56 error in 6.36 seconds ===================
Failed: unit failure (2)
----------------------------------------------------------------------
Skipping backend ipynb_webgl, not installed or working properly:
    
    Traceback (most recent call last):
      File "<string>", line 1, in <module>
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/__init__.py", line 15, in <module>
        from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/canvas.py", line 17, in <module>
        from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/gloo/__init__.py", line 47, in <module>
        from . import gl  # noqa
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/gloo/gl/__init__.py", line 231, in <module>
        from . import gl2 as default_backend  # noqa
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/gloo/gl/gl2.py", line 28, in <module>
        _lib = ctypes.cdll.LoadLibrary(_lib)
      File "/usr/lib/python2.7/ctypes/__init__.py", line 444, in LoadLibrary
        return self._dlltype(name)
      File "/usr/lib/python2.7/ctypes/__init__.py", line 366, in __init__
        self._handle = _dlopen(self._name, mode)
    OSError: libOSMesa.so: cannot open shared object file: No such file or directory
    
----------------------------------------------------------------------
----------------------------------------------------------------------
Skipping backend _test, not installed or working properly:
    
    Traceback (most recent call last):
      File "<string>", line 1, in <module>
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/__init__.py", line 15, in <module>
        from .canvas import Canvas, MouseEvent, KeyEvent  # noqa
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/app/canvas.py", line 17, in <module>
        from ..gloo.context import (GLContext, set_current_canvas, forget_canvas)
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/gloo/__init__.py", line 47, in <module>
        from . import gl  # noqa
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/gloo/gl/__init__.py", line 231, in <module>
        from . import gl2 as default_backend  # noqa
      File "/home/gabriel/.local/lib/python2.7/site-packages/vispy/gloo/gl/gl2.py", line 28, in <module>
        _lib = ctypes.cdll.LoadLibrary(_lib)
      File "/usr/lib/python2.7/ctypes/__init__.py", line 444, in LoadLibrary
        return self._dlltype(name)
      File "/usr/lib/python2.7/ctypes/__init__.py", line 366, in __init__
        self._handle = _dlopen(self._name, mode)
    OSError: libOSMesa.so: cannot open shared object file: No such file or directory
    
----------------------------------------------------------------------
----------------------------------------------------------------------
msg:
_VISPY_TESTING_APP=nobackend /usr/bin/python -m pytest -m "not vispy_app_test" /home/gabriel/.local/lib/python2.7/site-packages/vispy
============================= test session starts ==============================
platform linux2 -- Python 2.7.17, pytest-4.6.11, py-1.9.0, pluggy-0.13.1
rootdir: /home/gabriel/.local/lib/python2.7/site-packages
plugins: cov-2.10.0
collected 667 items

vispy/app/backends/tests/test_ipynb_util.py ....                         [  0%]
vispy/app/tests/test_app.py ..ssssss                                     [  1%]
vispy/app/tests/test_backends.py .s                                      [  2%]
vispy/app/tests/test_context.py ss                                       [  2%]
vispy/app/tests/test_interactive.py .                                    [  2%]
vispy/app/tests/test_ipython.py s                                        [  2%]
vispy/app/tests/test_qt.py s                                             [  2%]
vispy/app/tests/test_simultaneous.py s                                   [  2%]
vispy/color/tests/test_color.py .........                                [  4%]
vispy/geometry/tests/test_calculations.py .                              [  4%]
vispy/geometry/tests/test_generation.py .....                            [  5%]
vispy/geometry/tests/test_meshdata.py .                                  [  5%]
vispy/geometry/tests/test_triangulation.py .........                     [  6%]
vispy/gloo/gl/tests/test_basics.py ssss                                  [  7%]
vispy/gloo/gl/tests/test_functionality.py ssss                           [  7%]
vispy/gloo/gl/tests/test_names.py ......                                 [  8%]
vispy/gloo/gl/tests/test_use.py .                                        [  8%]
vispy/gloo/tests/test_buffer.py .................................        [ 13%]
vispy/gloo/tests/test_context.py ...                                     [ 14%]
vispy/gloo/tests/test_framebuffer.py ..                                  [ 14%]
vispy/gloo/tests/test_glir.py .....ss                                    [ 15%]
vispy/gloo/tests/test_globject.py .                                      [ 15%]
vispy/gloo/tests/test_program.py ..s.....                                [ 17%]
vispy/gloo/tests/test_texture.py ................................        [ 21%]
vispy/gloo/tests/test_use_gloo.py ssss                                   [ 22%]
vispy/gloo/tests/test_util.py ..                                         [ 22%]
vispy/gloo/tests/test_wrappers.py ..ss                                   [ 23%]
vispy/io/tests/test_image.py ..                                          [ 23%]
vispy/io/tests/test_io.py ...                                            [ 24%]
vispy/plot/tests/test_plot.py ss                                         [ 24%]
vispy/scene/cameras/tests/test_perspective.py s                          [ 24%]
vispy/scene/tests/test_node.py .s                                        [ 24%]
vispy/scene/tests/test_visuals.py ..                                     [ 25%]
vispy/testing/tests/test_testing.py .                                    [ 25%]
vispy/util/dpi/tests/test_dpi.py .                                       [ 25%]
vispy/util/fonts/tests/test_font.py .................................... [ 30%]
........................................................................ [ 41%]
.........................................................x.............. [ 52%]
........................................................................ [ 63%]
........................................................................ [ 74%]
................................................                         [ 81%]
vispy/util/tests/test_config.py s.                                       [ 81%]
vispy/util/tests/test_docstring_parameters.py s                          [ 81%]
vispy/util/tests/test_emitter_group.py ........                          [ 82%]
vispy/util/tests/test_event_emitter.py .......................           [ 86%]
vispy/util/tests/test_fourier.py .                                       [ 86%]
vispy/util/tests/test_import.py .........                                [ 87%]
vispy/util/tests/test_key.py .                                           [ 88%]
vispy/util/tests/test_logging.py ..                                      [ 88%]
vispy/util/tests/test_run.py .                                           [ 88%]
vispy/util/tests/test_transforms.py .                                    [ 88%]
vispy/util/tests/test_vispy.py s                                         [ 88%]
vispy/visuals/graphs/tests/test_layouts.py ...                           [ 89%]
vispy/visuals/shaders/tests/test_function.py ..........                  [ 90%]
vispy/visuals/shaders/tests/test_multiprogram.py .                       [ 90%]
vispy/visuals/shaders/tests/test_parsing.py ..                           [ 91%]
vispy/visuals/tests/test_arrows.py ssss                                  [ 91%]
vispy/visuals/tests/test_axis.py sss                                     [ 92%]
vispy/visuals/tests/test_collections.py s                                [ 92%]
vispy/visuals/tests/test_colorbar.py sss                                 [ 92%]
vispy/visuals/tests/test_colormap.py ssssss                              [ 93%]
vispy/visuals/tests/test_ellipse.py ssss                                 [ 94%]
vispy/visuals/tests/test_histogram.py s                                  [ 94%]
vispy/visuals/tests/test_image.py s                                      [ 94%]
vispy/visuals/tests/test_infinite_line.py s                              [ 94%]
vispy/visuals/tests/test_isosurface.py .                                 [ 94%]
vispy/visuals/tests/test_linear_region.py sss                            [ 95%]
vispy/visuals/tests/test_markers.py s                                    [ 95%]
vispy/visuals/tests/test_mesh.py ..                                      [ 95%]
vispy/visuals/tests/test_polygon.py sss                                  [ 96%]
vispy/visuals/tests/test_rectangle.py ssss                               [ 96%]
vispy/visuals/tests/test_regular_polygon.py sss                          [ 97%]
vispy/visuals/tests/test_sdf.py s                                        [ 97%]
vispy/visuals/tests/test_spectrogram.py s                                [ 97%]
vispy/visuals/tests/test_text.py ss                                      [ 97%]
vispy/visuals/tests/test_volume.py s..                                   [ 98%]
vispy/visuals/tests/test_windbarb.py s                                   [ 98%]
vispy/visuals/transforms/tests/test_transforms.py ..........             [100%]

============== 586 passed, 80 skipped, 1 xfailed in 11.01 seconds ==============
Passed

Skipping example test: Cannot test examples unless in vispy git directory
Running line endings check... 
Passed

Skipping flake8 test, flake8 not installed
Passed

Testing failed (['pyqt4', 'pyqt5', 'pyside', 'pyside2', 'sdl2', 'wx', 'osmesa'] failed, ['pyglet', 'glfw', 'ipynb_webgl', '_test', 'examples'] skipped) in 430.958 seconds
